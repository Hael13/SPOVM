#include <iostream>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/sem.h>

using namespace std;

union semun {
    int val;   
    struct semid_ds *buf;    
    unsigned short  *array;  
    struct seminfo  *__buf;  
};

void child(int sem, int *deskriptor, sembuf operation)
{
    char msg[256];
    while(true)
    {
        operation.sem_op=-1;
        semop(sem, &operation, 1);
        read(deskriptor[0], msg, sizeof(msg));
        if(strcmp(msg, "-")==0)
            break;
        cout<<"Recived string: "<<msg<<endl;
        semop(sem, &operation, 1);
     }
     semctl(sem, 0, IPC_RMID);
     close(deskriptor[1]);
}

void parent(int sem, int *deskriptor, sembuf operation)
{
    char msg[256];
    while(true)
    {
        cout<<"Insert string: ";
        cin.getline(msg, sizeof(msg), '\n');
        write(deskriptor[1], msg, sizeof(msg));
        if(strcmp(msg, "-")==0)
            break;
        operation.sem_op=2;
        if(semop(sem, &operation, 1)==-1)    
            cout<<"error"<<endl;        
        operation.sem_op=0;
        semop(sem, &operation, 1);
    }
    close(deskriptor[0]);
}


int main()
{
    int deskriptor[2], sem;
    sembuf operation;
    if(pipe(deskriptor)==-1)
    {
        cout<<"Can't create pipe"<<endl;
        exit(0);
    }
    sem=semget(IPC_PRIVATE, 1, IPC_CREAT|0666);
    if(sem==-1)
    {
        cout<<"error"<<endl;
        semctl(sem, 0, IPC_RMID, 0);
        exit(0);
    }
    union semun p;
    p.val=0;
    if(semctl(sem, 0, SETVAL, p)==-1)
        cout<<"error"<<endl;
    operation.sem_num=0;
    operation.sem_flg=SEM_UNDO;
    switch(fork())
    {
        case 0:
            child(sem, deskriptor, operation);
            break;
        default:
            parent(sem, deskriptor, operation);
            break;
    }
    return 0;
}
