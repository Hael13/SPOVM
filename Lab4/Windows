#define _CRT_SECURE_NO_WARNINGS
#include <iostream>
#include <string>
#include <Windows.h>
#include <time.h>
#include <vector>
#include <conio.h>
using namespace std;

CRITICAL_SECTION cs;

void print(string *source)
{
	string str;
	str = *source;
	while (true)
	{
		EnterCriticalSection(&cs);
		cout << str << endl;
		LeaveCriticalSection(&cs);
		Sleep(1000);
	}
}

HANDLE AddThread()
{
	HANDLE info;
	string source;
	SECURITY_ATTRIBUTES s = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };
	cout << "Insert string: ";
	getline(cin, source, '\n');
	info=CreateThread(&s, NULL, (LPTHREAD_START_ROUTINE)print, &source, NULL, NULL);
	if (!info)
	{
		cout << "Process isn't created" << endl;
		system("pause");
		exit(0);
	}
	Sleep(1000);
	return info;
}

void RemoveThread(vector<HANDLE>& lst)
{
	TerminateThread(lst[lst.size() - 1], 0);
	lst.pop_back();
}

int main()
{
	bool fl = true;
	vector<HANDLE> processes;
	string name;
	InitializeCriticalSection(&cs);
	SECURITY_ATTRIBUTES s = { sizeof(SECURITY_ATTRIBUTES), NULL, TRUE };
	while (fl)
	{
		switch (_getch())
		{
		case '+':
			Sleep(1000);
			EnterCriticalSection(&cs);
			processes.push_back(AddThread());
			LeaveCriticalSection(&cs);
			break;
		case '-':
			RemoveThread(processes);
			break;
		case 'q':
			while (!processes.empty())
				RemoveThread(processes);
			fl = false;
			break;
		}
	}

	DeleteCriticalSection(&cs);
	return 0;
}
